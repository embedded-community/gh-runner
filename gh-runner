#!/usr/bin/env python3

import argparse
import json
import os
import subprocess

from prettytable.prettytable import PrettyTable


class GHCLIException(Exception):
    pass


class GHRunnerExtension:
    # Colors
    R = "\033[0;31;40m" #RED
    G = "\033[0;32;40m" # GREEN
    Y = "\033[0;33;40m" # Yellow
    B = "\033[0;34;40m" # Blue
    N = "\033[0m" # Reset

    def __init__(self, args: argparse.Namespace):
        self.args: argparse.Namespace = args

    def run_command(self, endpoint: str, options: list) -> dict:
        args = ['gh', 'api', endpoint]
        args.extend(options)

        result = subprocess.run(args, capture_output=True)
        if result.stderr:
            raise GHCLIException(result.stderr.decode('utf-8'))
        if result.stdout:
            output = json.loads(result.stdout)
            if self.args.json:
                print(json.dumps(output, indent=4))
            return output
        return {}

    def list_groups(self):
        assert self.args.organization, 'Organization name is required'
        result = self.run_command(
            f'orgs/{self.args.organization}/actions/runner-groups', options= ['-X', 'GET', '--paginate'])

        table = PrettyTable()
        table.field_names = ['ID', 'Name']
        for group in result['runner_groups']:
            table.add_row([group['id'], group['name']])
        print(table)

    def show_group(self):
        assert self.args.organization, 'Organization name is required'
        if self.args.info_type in ['all', 'runners']:
            runners = []
            index = 1
            while True:
                result = self.run_command(
                    f'orgs/{self.args.organization}/actions/runner-groups/{self.args.group_id}/runners',
                    options=['-X', 'GET',  '-f', 'per_page=100', '-f', f'page={index}'])
                index += 1
                runners.extend(result['runners'])
                if len(runners) >= result['total_count']:
                    break

            print(f'Linked runners (count:{len(runners)}):')
            table = PrettyTable()
            table.field_names = ['ID', 'Name', 'Status', 'Busy', 'Labels']
            table._max_width = {'Labels': 100}
            for runner in runners:
                if runner['status'] == 'offline':
                    status = GHRunnerExtension.R + runner['status'] + GHRunnerExtension.N
                else:
                    status = GHRunnerExtension.G + runner['status'] + GHRunnerExtension.N

                busy = runner['busy']
                if runner['busy']:
                    busy = GHRunnerExtension.Y + 'True' + GHRunnerExtension.N

                table.add_row([
                    runner['id'],
                    runner['name'],
                    status,
                    busy ,
                    ', '.join([label['name'] for label in runner['labels']]),
                ])
            print(table)
        if self.args.info_type in ['all', 'repos']:
            result = self.run_command(
                f'orgs/{self.args.organization}/actions/runner-groups/{self.args.group_id}/repositories',
                options=['-X', 'GET', '--paginate'])
            print('Linked repositories:')
            table = PrettyTable()
            table.field_names = ['ID', 'Full name', 'Description']
            table._max_width = {'Description': 100}
            for repo in result['repositories']:
                table.add_row([repo['id'], repo['full_name'], repo['description']])
            print(table)

    def create_group(self):
        assert self.args.organization, 'Organization name is required'
        assert self.args.name, 'Group name is required'
        assert self.args.visibility, 'Visibility is required'

        result = self.run_command(
            f'orgs/{self.args.organization}/actions/runner-groups',
            options=['-X', 'POST', '-F', f'name={self.args.name}', '-F', f'visibility={self.args.visibility}'])
        print(f'Group({result["id"]}) with name: {result["name"]} created.')

    def link_repo(self):
        assert self.args.organization, 'Organization name is required'
        assert self.args.group_id, 'Group ID is required'
        assert self.args.repo_id, 'Repository ID is required'

        result = self.run_command(
            f'orgs/{self.args.organization}/actions/runner-groups/{self.args.group_id}/repositories/{self.args.repo_id}',
            options=['-X', 'PUT'])
        print(f'Repository({self.args.repo_id}) linked to group({self.args.group_id})')

    def unlink_repo(self):
        assert self.args.organization, 'Organization name is required'
        assert self.args.group_id, 'Group ID is required'
        assert self.args.repo_id, 'Repository ID is required'

        result = self.run_command(
            f'orgs/{self.args.organization}/actions/runner-groups/{self.args.group_id}/repositories/{self.args.repo_id}',
            options=['-X', 'DELETE'])
        print(f'Repository({self.args.repo_id}) unlinked from group({self.args.group_id})')

    def delete_group(self):
        assert self.args.organization, 'Organization name is required'
        assert self.args.group_id, 'Group ID is required'

        result = self.run_command(
            f'orgs/{self.args.organization}/actions/runner-groups/{self.args.group_id}',
            options=['-X', 'DELETE'])
        print(f'Group({self.args.group_id}) deleted')

    def list_repos(self):
        assert self.args.organization, 'Organization name is required'
        result = self.run_command(
            f'orgs/{self.args.organization}/repos',
            options=['-X', 'GET', '--paginate'])
        table = PrettyTable()
        table.field_names = ['ID', 'Full name', 'Description']
        table._max_width = {'Description': 100}
        for repo in result:
            table.add_row([repo['id'], repo['full_name'], repo['description']])
        print(table)

def parse_args():
    parser = argparse.ArgumentParser(description='Github CLI self-hosted runner extension')
    parser.add_argument('--json', action='store_true', help='Additionally show responses as plain JSON')
    parser.add_argument(
        '--organization',
        type=str,
        action='store',
        help='Github organization name',
        default=os.environ.get('GH_RUNNER_EXTENSION_GITHUB_ORGANIZATION'))
    subparsers = parser.add_subparsers(title='Subcommands')
    subparsers.required = True

    #
    # groups
    #
    groups_sp = subparsers.add_parser('groups', help='Manage self-hosted runner org groups')
    groups_sp_subparsers = groups_sp.add_subparsers(title='Groups subcommands')

    # list
    groups_sp_list_sp = groups_sp_subparsers.add_parser('list', help='List all groups')
    groups_sp_list_sp.set_defaults(func='list_groups')

    # create
    groups_sp_create_sp = groups_sp_subparsers.add_parser('create', help='Create new group')
    groups_sp_create_sp.add_argument('name', type=str, help='Group name')
    groups_sp_create_sp.add_argument(
        'visibility',
         type=str,
         choices=['all', 'selected', 'private'],
         help='Visibility for repos inside org, one of all|selected|private',
         default='selected')
    groups_sp_create_sp.set_defaults(func='create_group')

    #
    # group
    #
    group_sp = subparsers.add_parser('group', help='Manage self-hosted runner org group')
    group_sp_subparsers = group_sp.add_subparsers(title='Group subcommands')

    # show
    group_sp_show_sp = group_sp_subparsers.add_parser('show', help='Show group details')
    group_sp_show_sp.add_argument('group_id', type=int, help='Group ID')
    group_sp_show_sp.add_argument(
        'info_type',
         type=str,
         choices=['repos', 'runners', 'all'],
         help='Info type, one of repos|runners|all',
         default='all')
    group_sp_show_sp.set_defaults(func='show_group')

    # manage
    group_sp_manage_sp = group_sp_subparsers.add_parser('manage', help='Manage group')
    group_sp_manage_sp.add_argument('group_id', type=int, help='Group ID')

    group_sp_manage_sp_subparsers = group_sp_manage_sp.add_subparsers(title='Manage subcommands')

    # manage - link-repo
    group_sp_manage_sp_link_repo_sp = group_sp_manage_sp_subparsers.add_parser(
        'link-repo', help='Link repository to group')
    group_sp_manage_sp_link_repo_sp.add_argument('repo_id', type=int, help='Repository ID')
    group_sp_manage_sp_link_repo_sp.set_defaults(func='link_repo')

    # manage - unlink-repo
    group_sp_manage_sp_unlink_repo_sp = group_sp_manage_sp_subparsers.add_parser(
        'unlink-repo', help='Unlink repository from group')
    group_sp_manage_sp_unlink_repo_sp.add_argument('repo_id', type=int, help='Repository ID')
    group_sp_manage_sp_unlink_repo_sp.set_defaults(func='unlink_repo')

    # delete
    group_sp_delete_sp = group_sp_subparsers.add_parser('delete', help='Delete group')
    group_sp_delete_sp.add_argument('group_id', type=int, help='Group ID')
    group_sp_delete_sp.set_defaults(func='delete_group')

    #
    # repo
    #
    repo_sp = subparsers.add_parser('repo', help='Manage organization repositories')
    repo_sp_subparsers = repo_sp.add_subparsers(title='Repo subcommands')

    # list
    repo_sp_list_sp = repo_sp_subparsers.add_parser('list', help='List all org repositories')
    repo_sp_list_sp.set_defaults(func='list_repos')

    return parser.parse_args()


def main():
    args = parse_args()
    getattr(GHRunnerExtension(args), args.func)()


if __name__ == '__main__':
    main()
